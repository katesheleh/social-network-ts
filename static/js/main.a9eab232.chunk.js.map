{"version":3,"sources":["components/App/App.module.css","components/Sidebar/Nav/Nav.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Header/Header.tsx","components/Sidebar/Nav/Nav.tsx","components/Sidebar/Sidebar.tsx","components/Footer/Footer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","styles","header","Nav","nav","href","link","Sidebar","sidebar","Footer","footer","Post","props","post","imgWrap","src","alt","content","text","message","like","likesCounter","MyPosts","myPosts","form","textarea","button","postsList","Profile","profile","banner","img","App","app","main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,kBAAkB,QAAU,qBAAqB,QAAU,qBAAqB,OAAS,sB,gBCAtKD,EAAOC,QAAU,CAAC,KAAO,oB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,SAAW,0BAA0B,OAAS,0B,gBCA7FD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,sBAAsB,QAAU,sBAAsB,KAAO,mBAAmB,KAAO,qB,gBCA7ID,EAAOC,QAAU,CAAC,OAAS,wBAAwB,IAAM,uB,+NCQ1CC,EANA,WACb,OACE,4BAAQC,UAAWC,IAAOC,QAA1B,W,gCCUWC,EAZH,WACV,OACE,yBAAKH,UAAWC,IAAOG,KACrB,uBAAGC,KAAK,IAAIL,UAAWC,IAAOK,MAA9B,WACA,uBAAGD,KAAK,IAAIL,UAAWC,IAAOK,MAA9B,YACA,uBAAGD,KAAK,IAAIL,UAAWC,IAAOK,MAA9B,QACA,uBAAGD,KAAK,IAAIL,UAAWC,IAAOK,MAA9B,SACA,uBAAGD,KAAK,IAAIL,UAAWC,IAAOK,MAA9B,WCESC,EARC,WACd,OACE,yBAAKP,UAAWC,IAAOO,SACrB,kBAAC,EAAD,Q,iBCESC,EANA,WACb,OACE,yBAAKT,UAAWC,IAAOS,QAAvB,uB,gDCiBWC,EAdF,SAACC,GACZ,OACE,yBAAKZ,UAAWC,IAAOY,MACrB,yBAAKb,UAAWC,IAAOa,SACrB,yBAAKC,IAAI,kCAAkCC,IAAI,cAEjD,yBAAKhB,UAAWC,IAAOgB,SACrB,uBAAGjB,UAAWC,IAAOiB,MAAON,EAAMO,SAClC,yBAAKnB,UAAWC,IAAOmB,MAAOR,EAAMS,aAApC,aCIOC,EAhBC,WACd,OACE,yBAAKtB,UAAWC,IAAOsB,SACrB,wCACA,0BAAMvB,UAAWC,IAAOuB,MACtB,8BAAUxB,UAAWC,IAAOwB,WAC5B,4BAAQzB,UAAWC,IAAOyB,QAA1B,aAEF,yBAAK1B,UAAWC,IAAO0B,WACrB,kBAAC,EAAD,CAAMR,QAAQ,yBAAyBE,aAAc,KACrD,kBAAC,EAAD,CAAMF,QAAQ,uBAAuBE,aAAc,QCK5CO,EAfC,WACd,OACE,yBAAK5B,UAAWC,IAAO4B,SACrB,yBAAK7B,UAAWC,IAAO6B,QACrB,yBAAK9B,UAAWC,IAAO8B,IAAKhB,IAAI,qCAAqCC,IAAI,YAE3E,yBAAKhB,UAAWC,IAAOgB,SACrB,uCACA,0DACA,kBAAC,EAAD,SCeOe,MArBf,WACE,OACE,yBAAKhC,UAAWC,IAAOgC,KACrB,4BAAQjC,UAAWC,IAAOC,QACxB,kBAAC,EAAD,OAEF,0BAAMF,UAAWC,IAAOiC,MACtB,yBAAKlC,UAAWC,IAAOO,SACrB,kBAAC,EAAD,OAEF,yBAAKR,UAAWC,IAAOgB,SACrB,kBAAC,EAAD,QAGJ,4BAAQjB,UAAWC,IAAOS,QACxB,kBAAC,EAAD,SCVYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.a9eab232.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__15aYq\",\"header\":\"App_header__3ybks\",\"main\":\"App_main__1WBCe\",\"sidebar\":\"App_sidebar__1PTcA\",\"content\":\"App_content__22H2o\",\"footer\":\"App_footer__xx8AR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Nav_link__1EeNV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MyPosts_form__2BDO-\",\"textarea\":\"MyPosts_textarea__QbWEm\",\"button\":\"MyPosts_button__3Oo4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1CClD\",\"imgWrap\":\"Post_imgWrap__kEWGr\",\"content\":\"Post_content__1-84_\",\"text\":\"Post_text__2_Ldt\",\"like\":\"Post_like__2Aik0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Profile_banner__3rb2R\",\"img\":\"Profile_img__2Hrzo\"};","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={styles.header}>Header</header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styles from './Nav.module.css';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <a href=\"/\" className={styles.link}>Profile</a>\r\n      <a href=\"/\" className={styles.link}>Messages</a>\r\n      <a href=\"/\" className={styles.link}>News</a>\r\n      <a href=\"/\" className={styles.link}>Music</a>\r\n      <a href=\"/\" className={styles.link}>Users</a>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport styles from './Sidebar.module.css';\r\nimport Nav from './Nav/Nav';\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <div className={styles.sidebar}>\r\n      <Nav />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport styles from './Footer.module.css';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={styles.footer}>All right reserved</div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport styles from './Post.module.css';\r\n\r\ntype PostType = {\r\n  message: string\r\n  likesCounter: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n  return (\r\n    <div className={styles.post}>\r\n      <div className={styles.imgWrap}>\r\n        <img src=\"https://placeimg.com/50/50/tech\" alt=\"temporal\" />\r\n      </div>\r\n      <div className={styles.content}>\r\n        <p className={styles.text}>{props.message}</p>\r\n        <div className={styles.like}>{props.likesCounter} likes</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = () => {\r\n  return (\r\n    <div className={styles.myPosts}>\r\n      <h2>My Posts</h2>\r\n      <form className={styles.form}>\r\n        <textarea className={styles.textarea} />\r\n        <button className={styles.button}>Add post</button>\r\n      </form>\r\n      <div className={styles.postsList}>\r\n        <Post message=\"Hi World! How are you?\" likesCounter={12}/>\r\n        <Post message=\"Today is a good day!\" likesCounter={57}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <div className={styles.profile}>\r\n      <div className={styles.banner}>\r\n        <img className={styles.img} src=\"https://placeimg.com/1600/350/tech\" alt=\"banner\" />\r\n      </div>\r\n      <div className={styles.content}>\r\n        <h1>Profile</h1>\r\n        <div>avatar + user description</div>\r\n        <MyPosts />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport styles from './App.module.css';\nimport Header from '../Header/Header';\nimport Sidebar from '../Sidebar/Sidebar';\nimport Footer from '../Footer/Footer';\nimport Profile from '../Profile/Profile';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <header className={styles.header}>\n        <Header />\n      </header>\n      <main className={styles.main}>\n        <div className={styles.sidebar}>\n          <Sidebar />\n        </div>\n        <div className={styles.content}>\n          <Profile />\n        </div>\n      </main>\n      <footer className={styles.footer}>\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}